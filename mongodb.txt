let customer1 = db.customers.insertOne( {
    "name": "Ravi",
    "email": "Ravi@gmail.com",
    "address": {
      "street": "123 Ram Street",
      "city": "Dehli",
      "zipcode": "110005"
    },
    "phone": "7412369858",
    "registration_date": ISODate("2023-01-01T12:00:00Z")
  }).insertId;


let customer2 = db.customers.insertOne({
    "name": "Lisa",
    "email": "lisa@gmail.com",
    "address": {
      "street": "456 Elm St",
      "city": "Mumbai",
      "zipcode": "400005"
    },
    "phone": "741236985",
    "registration_date": ISODate("2023-02-15T08:30:00Z")
  }).insertId;


let customer3 = db.customers.insertOne({
    "name": "Abhishek",
    "email": "kohle@gmail.com",
    "address": {
      "street": "789 Laxman street",
      "city": "Nagpur",
      "zipcode": "678908"
    },
    "phone": "258963147",
    "registration_date": ISODate("2023-03-10T09:15:00Z")
  }).insertId;

let customer4 = db.customers.insertOne({
    "name": "Michael Brown",
    "email": "michaelbrown@gmail.com",
    "address": {
      "street": "101 Maple Ave",
      "city": "New York",
      "zipcode": "246807"
    },
    "phone": "555-4321",
    "registration_date": ISODate("2023-04-20T10:45:00Z")
  }).insertId;


let customer5 = db.customers.insertOne({
    "name": "Harsh Raj",
    "email": "harsh@gmail.com",
    "address": {
      "street": "202 Patli gali ",
      "city": "Ranchi",
      "zipcode": "135791"
    },
    "phone": "1596324756",
    "registration_date": ISODate("2023-05-05T14:30:00Z")
  }).insertId;






db.orders.insertOne({"order_id": "ORD123456","customer_id": customer1,"order_date": ISODate("2023-05-15T14:00:00Z"),"status": "shipped","items": [{ "product_name": "Laptop", "quantity": 1, "price": 1500 },{ "product_name": "Mouse", "quantity": 2, "price": 25 }],"total_value": 1550});

db.orders.insertOne({"order_id": "ORD123457","customer_id": customer2,"order_date": ISODate("2023-06-10T09:00:00Z"),"status": "delivered","items": [{ "product_name": "Smartphone", "quantity": 1, "price": 800 },{ "product_name": "Headphones", "quantity": 1, "price": 100 }],"total_value": 900});

db.orders.insertOne({"order_id": "ORD123458","customer_id": customer3,"order_date": ISODate("2023-06-20T11:30:00Z"),"status": "processing","items": [{ "product_name": "Tablet", "quantity": 1, "price": 500 },{ "product_name": "Tablet Cover", "quantity": 1, "price": 50 }],"total_value": 550});

db.orders.insertOne({"order_id": "ORD123459","customer_id": customer4,"order_date": ISODate("2023-06-25T15:45:00Z"),"status": "canceled","items": [{ "product_name": "Camera", "quantity": 1, "price": 1200 },{ "product_name": "SD Card", "quantity": 2, "price": 40 }],"total_value": 1280});

db.orders.insertOne({"order_id": "ORD123460","customer_id": customer5,"order_date": ISODate("2023-07-01T17:00:00Z"),"status": "shipped","items": [{ "product_name": "Gaming Console", "quantity": 1, "price": 400 },{ "product_name": "Controller", "quantity": 2, "price": 50 }],"total_value": 500});



Part 1

2. Find Orders for a Specific Customer: 

let customer = db.customers.findOne({ name: "Ravi" });
db.orders.find({ customer_id: customer._id });


3. Find the Customer for a Specific Order: 

let order = db.orders.findOne({order_id:"ORD123456"});
db.customers.findOne({_id:order.customer_id});


4. Update Order Status:

db.orders.updateOne({ order_id: "ORD123456" },{ $set: { status: "delivered" } });


5. Delete an Order: 

db.orders.deleteOne({ order_id: "ORD123456" });




Part 2

1. Calculate Total Value of All Orders by Customer:

db.orders.aggregate([
    {
        $group: {
            _id: "$customer_id",
            totalSpent: { $sum: "$total_value" }
        }
    },
    {
        $lookup: {
            from: "customers",
            localField: "_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    { $project: { "customerInfo.name": 1, totalSpent: 1 } }
]);


2. Group Orders by Status:

db.orders.aggregate([
    { $group: { _id: "$status", count: { $sum: 1 } } }
]);


3. List Customers with Their Recent Orders:

db.orders.aggregate([
    { $sort: { "order_date": -1 } },
    {
        $group: {
            _id: "$customer_id",
            recentOrder: { $first: "$$ROOT" }
        }
    },
    {
        $lookup: {
            from: "customers",
            localField: "_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    {
        $project: {
            "customerInfo.name": 1,
            "customerInfo.email": 1,
            "recentOrder.order_id": 1,
            "recentOrder.total_value": 1
        }
    }
]);


4. Find the Most Expensive Order by Customer:

db.orders.aggregate([
    { $sort: { total_value: -1 } },
    {
        $group: {
            _id: "$customer_id",
            mostExpensiveOrder: { $first: "$$ROOT" }
        }
    },
    {
        $lookup: {
            from: "customers",
            localField: "_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    {
        $project: {
            "customerInfo.name": 1,
            "mostExpensiveOrder.order_id": 1,
            "mostExpensiveOrder.total_value": 1
        }
    }
]);



Part 3

1. Find All Customers Who Placed Orders in the Last Month:

db.orders.aggregate([
    { $match: { order_date: { $gte: new Date(new Date("2023-06-25T15:45:00Z") - 30 * 24 * 60 * 60 * 1000) } } },
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    {
        $project: {
            "customerInfo.name": 1,
            "customerInfo.email": 1,
            "order_date": 1
        }
    }
]);


2. Find All Products Ordered by a Specific Customer:

const customer = db.customers.findOne({ "name": "John Doe" });
db.orders.aggregate([
    { $match: { "customer_id": customer._id } },
    { $unwind: "$items" },
    {
        $group: {
            _id: "$items.product_name",
            totalQuantity: { $sum: "$items.quantity" }
        }
    }
]);


3. Find the Top 3 Customers with the Most Expensive Total Orders:

db.orders.aggregate([
    { $group: { _id: "$customer_id", totalSpent: { $sum: "$total_value" } } },
    {
        $lookup: {
            from: "customers",
            localField: "_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    { $sort: { totalSpent: -1 } },
    { $limit: 3 },
    {
        $project: {
            "customerInfo.name": 1,
            totalSpent: 1
        }
    }
]);


4. Add a New Order for an Existing Customer:

const customer = db.customers.findOne({ "name": "Jane Smith" });
db.orders.insertOne({
    "order_id": "ORD123457",
    "customer_id": customer._id,
    "order_date": new Date(),
    "status": "pending",
    "items": [
        { "product_name": "Smartphone", "quantity": 1, "price": 700 },
        { "product_name": "Headphones", "quantity": 1, "price": 150 }
    ],
    "total_value": 850
});



Part 4

1. Find Customers Who Have Not Placed Orders:

db.customers.aggregate([
    {
        $lookup: {
            from: "orders",
            localField: "_id",
            foreignField: "customer_id",
            as: "orders"
        }
    },
    { $match: { "orders": { $size: 0 } } },
    { $project: { "name": 1, "email": 1 } }
]);


2. Calculate the Average Number of Items Ordered per Order:

db.orders.aggregate([
    { $unwind: "$items" },
    { $group: { _id: "$_id", itemCount: { $sum: "$items.quantity" } } },
    { $group: { _id: null, avgItemsPerOrder: { $avg: "$itemCount" } } }
]);


3. Join Customer and Order Data Using $lookup:

db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    { $unwind: "$customerInfo" },
    {
        $project: {
            "customerInfo.name": 1,
            "customerInfo.email": 1,
            "order_id": 1,
            "total_value": 1,
            "order_date": 1
        }
    }
]);